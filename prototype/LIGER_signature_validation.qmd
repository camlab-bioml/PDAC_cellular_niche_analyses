---
title: "LIGER signature validation"
format: html
editor: visual
---

```{r}
#| label: load-packages
#| include: false
suppressPackageStartupMessages({
  library(magrittr)
  library(tidyverse)
  library(sjstats)
  library(ggpubr)
  library(tidyr)
  library(corrplot)
  library(clue)
  library(stringr)
  library(ComplexHeatmap)
  library(patchwork)
})
```

```{r}
celltype = "Mono"
```

# load gene loading matrix

```{r}
w <- read_tsv(paste0("../output/v2/results/LIGER/signature-analysis/", celltype, "/loading-matrices/", celltype, "-gene-loading.tsv"))

genes <- w$gene
w$gene <- NULL
rownames(w) <- genes

rm(genes)
```

# compute and plot correlation between signatures

```{r}
w.corr = cor(log1p(w), use = "complete.obs", method = "spearman")
w.corr <- as.data.frame(w.corr)
```

```{r}
corrplot::corrplot(corr = as.matrix(w.corr))
```

```{r}
tibble(w.corr)
```

# construct dataframe for discovery-validation signature mapping

```{r}
sig.num = length(w.corr) / 2
w.corr.mtx <- w.corr[(sig.num+1):nrow(w.corr),1:sig.num]
validated.sig.df <- data.frame(discovery = NA, validation.1 = NA, validation.1.corr = NA, validated = NA, validation.2 = NA, validation.2.corr = NA)
validated = 1

for (s in seq(sig.num)) {
  max.corr.1 = 0
  max.corr.2 = 0
  val.1 = 0
  val.2 = 0
  
  for (v in seq(sig.num)) {
    val.sig.corr = w.corr.mtx[[s]][v]
    if (val.sig.corr > max.corr.1) {
      max.corr.2 = max.corr.1
      max.corr.1 = val.sig.corr
      val.2 = val.1
      val.1 = v
    } else if (val.sig.corr > max.corr.2) {
        max.corr.2 = val.sig.corr
        val.2 = v
    }
  }
  
  holder.df <- data.frame(
    discovery = paste("discovery", s, sep = " "), 
    validation.1 = paste("validation", val.1, sep = " "), validation.1.corr = max.corr.1, 
    validated = NA, 
    validation.2 = paste("validation", val.2, sep = " "), validation.2.corr = max.corr.2
  )
  if (max.corr.1 > 0.4) {
    holder.df$validated <- paste(celltype, validated, sep = " ")
    validated = validated + 1
  }
  
  validated.sig.df <- rbind(validated.sig.df, holder.df)
}

validated.sig.df <- validated.sig.df %>% filter(!if_all(everything(), is.na))
```

# compute and plot distance between signatures

```{r}
w.mtx <- as.matrix(w) %>% t()
w.dist <- dist(w.mtx, method = "minkowski", p = 1) %>% as.matrix()
w.dist[w.dist == 0] <- NA

group <- str_split(colnames(w.dist), pattern = " ", simplify = T)[,1]
# row_ha <- rowAnnotation(Group = group,
#                         show_annotation_name = FALSE)
# col_ha <- columnAnnotation(Group = group,
#                            show_annotation_name = FALSE)

Heatmap((w.dist), name = "Minkowski distance",
        col = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))(100),
        cluster_rows = F, cluster_columns = F,
        row_split = group,
        column_split = group)

sig.num = ncol(w.dist) / 2
w.dist.mtx <- w.dist[(sig.num+1):nrow(w.dist),1:sig.num]
pheatmap((w.dist.mtx), cluster_rows = F, cluster_cols = F)

colorRamp(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))
```

# hungarian method to force one-to-one match

## tidy up matrices

```{r}
w.dist <- as.data.frame(w.dist)
```

## extract useful matrices

```{r}

```

## discovery-validation

```{r}
sig.num = length(w.corr) / 2
w.corr.mtx <- w.corr[1:sig.num, (sig.num+1):ncol(w.corr)] %>% as.matrix()
w.corr.mtx[w.corr.mtx < 0] = 0
sig.num = length(w.dist) / 2
w.dist.mtx <- w.dist[1:sig.num, (sig.num+1):ncol(w.dist)] %>% as.matrix()

map.corr <- solve_LSAP(w.corr.mtx, maximum = T)
map.dist <- solve_LSAP(w.dist.mtx, maximum = F)

Heatmap((w.dist.mtx[,map.dist]), name = "Minkowski distance",
        col = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))(100),
        cluster_rows = F, cluster_columns = F)
Heatmap((w.corr.mtx[,map.corr]), name = "Correlation",
        col = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))(100),
        cluster_rows = F, cluster_columns = F)
```

## discovery-discovery

```{r}
sig.num = length(w.corr) / 2
w.corr.mtx <- w.corr[1:sig.num,1:sig.num] %>% as.matrix()
w.corr.mtx[w.corr.mtx < 0] = 0
w.corr.mtx[w.corr.mtx == 1] = 0
sig.num = length(w.dist) / 2
w.dist.mtx <- w.dist[1:sig.num,1:sig.num] %>% as.matrix()
w.dist.mtx[w.dist.mtx == 0] = 1.01*max(w.dist.mtx)

map.corr <- solve_LSAP(w.corr.mtx, maximum = T)
map.dist <- solve_LSAP(w.dist.mtx, maximum = F)

Heatmap((w.dist.mtx[,map.dist]), name = "Minkowski distance",
        col = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))(100),
        cluster_rows = F, cluster_columns = F)
Heatmap((w.corr.mtx[,map.corr]), name = "Correlation",
        col = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))(100),
        cluster_rows = F, cluster_columns = F)
```

## validation-validation

```{r}
sig.num = length(w.corr) / 2
w.corr.mtx <- w.corr[(sig.num+1):nrow(w.corr),(sig.num+1):ncol(w.corr)] %>% as.matrix()
w.corr.mtx[w.corr.mtx < 0] = 0
w.corr.mtx[w.corr.mtx == 1] = 0
sig.num = length(w.dist) / 2
w.dist.mtx <- w.dist[(sig.num+1):nrow(w.dist),(sig.num+1):ncol(w.dist)] %>% as.matrix()
w.dist.mtx[w.dist.mtx == 0] = 1.01*max(w.dist.mtx)

map.corr <- solve_LSAP(w.corr.mtx, maximum = T)
map.dist <- solve_LSAP(w.dist.mtx, maximum = F)

Heatmap((w.dist.mtx[,map.dist]), name = "Minkowski distance",
        col = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))(100),
        cluster_rows = F, cluster_columns = F)
Heatmap((w.corr.mtx[,map.corr]), name = "Correlation",
        col = colorRampPalette(rev(RColorBrewer::brewer.pal(n = 7, name = "RdYlBu")))(100),
        cluster_rows = F, cluster_columns = F)
```

# simulation to test for significant validation

## get signature loadings

```{r}
w.dis <- w %>% select(contains("discovery")) %>% set_rownames(., rownames(w))
w.val <- w %>% select(contains("validation")) %>% set_rownames(., rownames(w))
```

## simulate distance between signatures

```{r}
num.sim = 1000

w.dist.sim.list <- lapply(seq(length(w.dis)), function(sig.dis.id) {
  the.list <- lapply(seq(length(w.val)), function(sig.val.id) {
    sapply(seq(num.sim), function(sim.id) {
      dist(rbind(w.dis[[paste("discovery", sig.dis.id, sep = " ")]], 
                 sample(w.val[[paste("validation", sig.val.id, sep = " ")]], 
                        size = length(w.val[[paste("validation", sig.val.id, sep = " ")]]), 
                        replace = F)), 
           method = "minkowski", p = 1)[1]
    })
  })
  names(the.list) <- paste("validation", seq(length(w.val)), sep = " ")
  the.list
})
names(w.dist.sim.list) <- paste("discovery", seq(length(w.dis)), sep = " ")
```

## simulate correlation between signatures
```{r}
num.sim = 1000

w.corr.sim.list <- lapply(seq(length(w.dis)), function(sig.dis.id) {
  the.list <- lapply(seq(length(w.val)), function(sig.val.id) {
    sapply(seq(num.sim), function(sim.id) {
      cor(log1p(w.dis[[paste("discovery", sig.dis.id, sep = " ")]]), 
          log1p(sample(w.val[[paste("validation", sig.val.id, sep = " ")]], 
                       size = length(w.val[[paste("validation", sig.val.id, sep = " ")]]), 
                       replace = F)), 
          use = "complete.obs", method = "spearman")
    })
  })
  names(the.list) <- paste("validation", seq(length(w.val)), sep = " ")
  the.list
})
names(w.corr.sim.list) <- paste("discovery", seq(length(w.dis)), sep = " ")
```

## plot distance between signatures
```{r}
p.list <- lapply(seq(length(w.dist.sim.list)), function(sig.dis.id) {
  dis.dist.sim.list <- w.dist.sim.list[[sig.dis.id]]
  the.list <- lapply(seq(length(dis.dist.sim.list)), function(sig.val.id) {
    w.dist.sim <- dis.dist.sim.list[[sig.val.id]]
    
    ggplot(data = data.frame(simulated.distance = w.dist.sim,
                             five.percent = quantile(w.dist.sim, 0.05),
                             one.percent = quantile(w.dist.sim, 0.01),
                             real.distance = w.dist[paste("discovery", sig.dis.id, sep = " "), paste("validation", sig.val.id, sep = " ")]), 
           mapping = aes(x = simulated.distance)) +
      geom_histogram(aes(y = ..density..), color = "darkblue", fill = "lightblue") +
      geom_vline(aes(xintercept = mean(five.percent)), 
                 color = "blue", linetype = "dashed", linewidth = 1) +
      geom_text(aes(x = mean(five.percent), label = paste0("\n", "5%"), y = 0), 
                colour = "blue", angle = 90, hjust = 0, vjust = 0.5) +
      geom_vline(aes(xintercept = mean(one.percent)), 
                 color = "orange", linetype = "dashed", linewidth = 1) +
      geom_text(aes(x = mean(one.percent), label = paste0("\n", "1%"), y = 0), 
                colour = "orange", angle = 90, hjust = 0, vjust = 0.5) +
      geom_vline(aes(xintercept = mean(real.distance)), 
                 color = "red", linetype = "solid", linewidth = 1) +
      geom_text(aes(x = mean(real.distance), label = paste0("\n", "real distance: ", round(mean(real.distance),0)), y = 0), 
                colour = "red", angle = 90, hjust = 0, vjust = 0.5) +
      geom_density(alpha = .2, fill = "#FF6666") +
      theme_pubr() + 
      labs(title = paste0(celltype, " Discovery.", sig.dis.id, " vs. ", "Validation.", sig.val.id),
           x = "Simulated distance") +
      labs(title = paste0("Validation.", sig.val.id),
           x = NULL,
           y = NULL) 
  })
  names(the.list) <- paste("validation", seq(length(dis.dist.sim.list)), sep = " ")
  the.list
})
names(p.list) <- paste("discovery", seq(length(w.dist.sim.list)), sep = " ")
```

```{r}
plot.sig.id = 7

png(filename = "test.png", width = 15, height = 10, units = "in", res = 321)
wrap_plots(plotlist = p.list[[paste0("discovery ", plot.sig.id)]]) +
  plot_annotation(title = paste0(celltype, " Discovery.", plot.sig.id, " vs. "),
                  subtitle = paste0("x = Simulated distance, y = Density"),
                  theme = theme(plot.title = element_text(size = 18, face = "bold")))
dev.off()
```

## plot correlation between signatures
```{r}
p.list <- lapply(seq(length(w.corr.sim.list)), function(sig.dis.id) {
  dis.corr.sim.list <- w.corr.sim.list[[sig.dis.id]]
  the.list <- lapply(seq(length(dis.corr.sim.list)), function(sig.val.id) {
    w.corr.sim <- dis.corr.sim.list[[sig.val.id]]
    
    ggplot(data = data.frame(simulated.correlation = w.corr.sim,
                             five.percent = quantile(w.corr.sim, 0.95),
                             one.percent = quantile(w.corr.sim, 0.99),
                             real.correlation = w.corr[paste("discovery", sig.dis.id, sep = " "), paste("validation", sig.val.id, sep = " ")]), 
           mapping = aes(x = simulated.correlation)) +
      geom_histogram(aes(y = ..density..), color = "darkblue", fill = "lightblue") +
      geom_vline(aes(xintercept = mean(five.percent)), 
                 color = "blue", linetype = "dashed", linewidth = 1) +
      geom_text(aes(x = mean(five.percent), label = paste0("\n", "5%"), y = 0), 
                colour = "blue", angle = 90, hjust = 0, vjust = 0.5) +
      geom_vline(aes(xintercept = mean(one.percent)), 
                 color = "orange", linetype = "dashed", linewidth = 1) +
      geom_text(aes(x = mean(one.percent), label = paste0("\n", "1%"), y = 0), 
                colour = "orange", angle = 90, hjust = 0, vjust = 0.5) +
      geom_vline(aes(xintercept = mean(real.correlation)), 
                 color = "red", linetype = "solid", linewidth = 1) +
      geom_text(aes(x = mean(real.correlation), label = paste0("\n", "real correlation: ", round(mean(real.correlation),4)), y = 0), 
                colour = "red", angle = 90, hjust = 0, vjust = 0.5) +
      geom_density(alpha = .2, fill = "#FF6666") +
      theme_pubr() + 
      labs(title = paste0(celltype, " Discovery.", sig.dis.id, " vs. ", "Validation.", sig.val.id),
           x = "Simulated correlation") +
      labs(title = paste0("Validation.", sig.val.id),
           x = NULL,
           y = NULL) 
  })
  names(the.list) <- paste("validation", seq(length(dis.corr.sim.list)), sep = " ")
  the.list
})
names(p.list) <- paste("discovery", seq(length(w.corr.sim.list)), sep = " ")
```

```{r}
plot.sig.id = 7

png(filename = "test.png", width = 15, height = 10, units = "in", res = 321)
wrap_plots(plotlist = p.list[[paste0("discovery ", plot.sig.id)]]) +
  plot_annotation(title = paste0(celltype, " Discovery.", plot.sig.id, " vs. "),
                  subtitle = paste0("x = Simulated correlation, y = Density"),
                  theme = theme(plot.title = element_text(size = 18, face = "bold")))
dev.off()
```

