---
title: "Make Stan Data"
format: html
editor: visual
---

```{r}
#| label: load-packages
#| include: false

suppressPackageStartupMessages({
  library(SingleCellExperiment) # BioConductor
  library(tidyverse) # CRAN
  library(here) # CRAN
  library(DT) # CRAN
  library(magrittr)
  library(stats)
})
```

# helper functions

```{r}

```

# load data
```{r}
celltypes <- c("pancreatic epithelial cell", "fibroblast", "blood vessel endothelial cell", 
               "CD4-positive, alpha-beta T cell", "CD8-positive, alpha-beta T cell", "macrophage", "myeloid dendritic cell", "B cell")
condition <- "collapsed-scored-validation"

number.of.niches = 3
min.number.of.cells.per.sample = 20
max.number.of.cells.per.sample = 1000
```

```{r}
df.sig.list <- lapply(celltypes, function(ct) {
  read_tsv(paste0("/Users/kieranlab/Desktop/Snakemake_pipelines/PDAC_TME_on_cluster/output/results/LIGER/signature-analysis/", ct, "/loading-matrices/", ct, "-signature-loading-", condition, ".tsv"))
})
names(df.sig.list) <- celltypes
```

```{r}
df.sig.mean <- read_tsv(paste0("/Users/kieranlab/Desktop/Snakemake_pipelines/PDAC_TME_on_cluster/output/results/LIGER/patient-analysis/patient-signature-profiles/", condition, "/loading-mean/patient-full-signature-profiles-loading-mean-", condition, ".tsv"))
```

# removing samples with too few cells
```{r}
lapply(celltypes, function(ct) {
  holder <- df.sig.list[[ct]]
  ggplot(holder, aes(x = sample, fill = cohort)) +
    geom_bar() + 
    scale_y_log10() + 
    labs(title = ct) + 
    theme_pubr(x.text.angle = 45)
})
```

```{r}
df.sig.list <- lapply(df.sig.list, function(df.sig) {
  df.sig %>%
    group_by(sample) %>%
    mutate(count = n()) %>%
    ungroup() %>% 
    dplyr::filter(count >= min.number.of.cells.per.sample) %>%
    dplyr::select(!count)
})

samples.common <- Reduce(intersect, lapply(df.sig.list, function(df.sig) unique(df.sig$sample)))
samples.union <- Reduce(union, lapply(df.sig.list, function(df.sig) unique(df.sig$sample)))
samples.union
```

# construct elements of Stan data list
```{r}
stan.data.list <- lapply(names(df.sig.list), function(ct) {
  df.sig <- df.sig.list[[ct]] %>% 
    #dplyr::filter(sample %in% samples.common) %>% 
    slice_sample(n = max.number.of.cells.per.sample, by = sample, replace = FALSE) %>%
    mutate(sample = factor(sample, levels = unique(sample))) %>% 
    arrange(sample)
  list(
    N = nrow(df.sig),
    P = length(unique(df.sig$sample)),
    K = length(grep(ct, names(df.sig), value = T)),
    Y = df.sig %>% dplyr::select(contains(ct)) %>% as.matrix(),
    y = (df.sig %>% dplyr::select(contains(ct)) %>% as.matrix()) / sd(df.sig %>% dplyr::select(contains(ct)) %>% as.matrix()),
    x = plyr::mapvalues(df.sig$sample, 
                        from = samples.union,
                        to = seq(length(samples.union)) %>% as.numeric(),
                        warn_missing = F)
  )
})
names(stan.data.list) <- names(df.sig.list)
```

# build the stan data list for model fitting
```{r}
stan.data.base <- list(
  C = length(stan.data.list),
  L = number.of.niches,
  P = length(samples.union)
)

stan.data <- stan.data.base

j.tracker = 1

for (ct in celltypes) {
  stan.data.ct <- list(
    j = j.tracker,
    N = stan.data.list[[ct]]$N,
    P = stan.data.list[[ct]]$P,
    K = stan.data.list[[ct]]$K,
    y = stan.data.list[[ct]]$y,
    x = stan.data.list[[ct]]$x
  )
  names(stan.data.ct) <- paste0(names(stan.data.ct), "_", ct)
  j.tracker = j.tracker + stan.data.ct$K
  
  stan.data <- c(stan.data, stan.data.ct)
}

rm(j.tracker, ct, stan.data.ct)
```

# tidy up observed patient level signature loading mean mtrix
```{r}
sigs.order <- lapply(stan.data.list, function(df) {colnames(df$y)}) %>% unlist()
sigs.order

df.sig.mean <- df.sig.mean %>%
  slice(order(factor(sample, levels = samples.union))) %>%
  column_to_rownames("sample") %>%
  select(all_of(sigs.order)) %>%
  mutate_if(is.numeric, scales::rescale) %>%
  replace(is.na(.), 0)
```

## plot signature loading means for different cell types
```{r}
df.sig.mean.for.plot <- read_tsv(paste0("/Users/kieranlab/Desktop/Snakemake_pipelines/PDAC_TME_on_cluster/output/results/LIGER/patient-analysis/patient-signature-profiles/", condition, "/loading-mean/patient-full-signature-profiles-loading-mean-", condition, ".tsv"))

df.sig.mean.for.plot <- df.sig.mean.for.plot |>
  #mutate_if(is.numeric, scales::rescale) |>
  pivot_longer(`pancreatic epithelial cell RepVal 1`:`B cell RepVal 5`, values_to = "loading_mean", names_to = "signature") |>
  mutate(celltype = str_split(signature, " RepVal [0-9]$", simplify = T)[,1]) |>
  mutate(celltype = str_split(celltype, " RepVal [0-9][0-9]$", simplify = T)[,1])
```

```{r}
ggplot(df.sig.mean.for.plot, aes(x = signature, y = loading_mean, color = celltype)) + 
  geom_boxplot() + 
  facet_wrap(~ cohort) +
  theme_pubr() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave("test1_1.png", device = "png", width = 20, height = 10, units = "in", dpi = 321)
```


# Optional debugging code 
## chopping outlier values
```{r}
stan.data$y_stellate[stan.data$y_stellate > 5] <- 5
stan.data$y_Mono[stan.data$y_Mono > 5] <- 5
```

## removing one signature
```{r}
stan.data$K_mono <- stan.data$K_mono - 1
stan.data$y_mono <- stan.data$y_mono[,-4]

# stan.data$y_mono <- matrix(runif(nrow(stan.data$y_mono) * ncol(stan.data$y_mono)), nrow = nrow(stan.data$y_mono))
```

## generating white noise
```{r}
#calculate the sd for each row...
sds <- colSds(stan.data$y_mono)
sds

#generate all noise factors at once...
m <- rnorm(ncol(stan.data$y_mono) * nrow(stan.data$y_mono), mean = 0, sd = sds * 1e-04)

head(m, 18)
m <- matrix(data = m, nrow = ncol(stan.data$y_mono), ncol = nrow(stan.data$y_mono)) %>% t()
head(m)
```

## adding white noise to signature loading matrix
```{r}
stan.data$y_mono <- stan.data$y_mono + abs(m)
```

## checking each signature
```{r}
summary(stan.data$y_mono[,1])
summary(stan.data$y_mono[,2])
summary(stan.data$y_mono[,3])
summary(stan.data$y_mono[,4])
summary(stan.data$y_mono[,5])
summary(stan.data$y_mono[,6])
```

```{r}
(rowSums(stan.data$y_mono) == 0) %>% table()
```

## checking correlation between mean signature loadings per patient
```{r}
holder.df <- cbind(stan.data$y_ste, stan.data$x_ste) %>% as.data.frame()
names(holder.df) <- c(names(holder.df)[1:length(names(holder.df))-1], "sample")

holder.df <- holder.df %>%
  group_by(sample) %>%
  summarize(across(starts_with("stellate"), mean, .names = "mean_{.col}"))

cor(holder.df[,-1], holder_mono.df[,-1])

holder_mono.df <- holder.df
```

# save Stan data list
```{r}
saveRDS(stan.data, file = "/Users/kieranlab/Desktop/Snakemake_pipelines/PDAC_TME/prototype/Stan/stanData.rds")
```

