---
title: "Make Stan Data"
format: html
editor: visual
---

```{r}
#| label: load-packages
#| include: false

suppressPackageStartupMessages({
  library(SingleCellExperiment) # BioConductor
  library(tidyverse) # CRAN
  library(here) # CRAN
  library(DT) # CRAN
  library(magrittr)
  library(stats)
})
```

# helper functions

```{r}

```

# load data
```{r}
# celltype <- "Mono"
celltypes <- c("Mono", "stellate")
condition <- "collapsed"
```

```{r}
df.sig.list <- lapply(celltypes, function(ct) {
  read_tsv(paste0("/Users/kieranlab/Desktop/Snakemake_pipelines/PDAC_TME/output/v2/results/LIGER/signature-analysis/", ct, "/loading-matrices/", ct, "-signature-loading-", condition, ".tsv"))
})
names(df.sig.list) <- celltypes
```

# removing samples with too few cells
```{r}
df.sig.list <- lapply(df.sig.list, function(df.sig) {
  df.sig %>%
    group_by(sample) %>%
    mutate(count = n()) %>%
    ungroup() %>% 
    filter(count >= 10) %>%
    select(!count)
})

table(df.sig.list$Mono$sample)
table(df.sig.list$stellate$sample)

samples.common <- intersect(unique(df.sig.list$Mono$sample), unique(df.sig.list$stellate$sample))
```

# construct elements of Stan data list
```{r}
stan.data.list <- lapply(names(df.sig.list), function(ct) {
  df.sig <- df.sig.list[[ct]] %>% filter(sample %in% samples.common) %>% mutate(sample = factor(sample, levels = samples.common)) %>% arrange(sample)
  list(
    N = nrow(df.sig),
    P = length(unique(df.sig$sample)),
    K = length(grep(ct, names(df.sig), value = T)),
    Y = df.sig %>% select(contains(ct)) %>% as.matrix(),
    y = (df.sig %>% select(contains(ct)) %>% as.matrix()) / sd(df.sig %>% select(contains(ct)) %>% as.matrix()),
    x = plyr::mapvalues(df.sig$sample, 
                        from = unique(df.sig$sample),
                        to = seq(length(unique(df.sig$sample)))) %>% as.numeric()
  )
})
names(stan.data.list) <- names(df.sig.list)
```

# build the stan data list for model fitting
```{r}
stan.data <- list(
  C = length(stan.data.list),
  P_list = seq(1:stan.data.list$Mono$P),
  N_mono = stan.data.list$Mono$N,
  P_mono = stan.data.list$Mono$P,
  K_mono = stan.data.list$Mono$K,
  y_mono = stan.data.list$Mono$y,
  x_mono = stan.data.list$Mono$x,
  N_ste = stan.data.list$stellate$N,
  P_ste = stan.data.list$stellate$P,
  K_ste = stan.data.list$stellate$K,
  y_ste = stan.data.list$stellate$y,
  x_ste = stan.data.list$stellate$x
)
```

# Optional debugging code 
## removing one signature
```{r}
stan.data$K_mono <- stan.data$K_mono - 1
stan.data$y_mono <- stan.data$y_mono[,-4]

# stan.data$y_mono <- matrix(runif(nrow(stan.data$y_mono) * ncol(stan.data$y_mono)), nrow = nrow(stan.data$y_mono))
```

## generating white noise
```{r}
#calculate the sd for each row...
sds <- colSds(stan.data$y_mono)
sds

#generate all noise factors at once...
m <- rnorm(ncol(stan.data$y_mono) * nrow(stan.data$y_mono), mean = 0, sd = sds * 1e-04)

head(m, 18)
m <- matrix(data = m, nrow = ncol(stan.data$y_mono), ncol = nrow(stan.data$y_mono)) %>% t()
head(m)
```

## adding white noise to signature loading matrix
```{r}
stan.data$y_mono <- stan.data$y_mono + abs(m)
```

## checking each signature
```{r}
summary(stan.data$y_mono[,1])
summary(stan.data$y_mono[,2])
summary(stan.data$y_mono[,3])
summary(stan.data$y_mono[,4])
summary(stan.data$y_mono[,5])
summary(stan.data$y_mono[,6])
```

```{r}
(rowSums(stan.data$y_mono) == 0) %>% table()
```

## checking correlation between mean signature loadings per patient
```{r}
holder.df <- cbind(stan.data$y_ste, stan.data$x_ste) %>% as.data.frame()
names(holder.df) <- c(names(holder.df)[1:length(names(holder.df))-1], "sample")

holder.df <- holder.df %>%
  group_by(sample) %>%
  summarize(across(starts_with("stellate"), mean, .names = "mean_{.col}"))

cor(holder.df[,-1], holder_mono.df[,-1])

holder_mono.df <- holder.df
```

# save Stan data list
```{r}
saveRDS(stan.data, file = "Stan/stanData.rds")
```

